name: Docker image publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
    inputs:
      vTag:
        required: true
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: drewsk/docker-sql-extension


jobs:
  build:

    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Setup QEMU for cross-platform builds
      - name: setup qemu
        uses: docker/setup-qemu-action@v3
    
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into dockerhub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ secrets.DH_USER }}
          password: ${{ secrets.DH_PAT }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} 
          labels: |
            maintainer=dzsquared
            org.opencontainers.image.title=SQL container manager
            org.opencontainers.image.description=Create, connect, and manage SQL dev containers
            org.opencontainers.image.vendor=DrewSK.Tech
            com.docker.desktop.extension.api.version=0.3.4
            com.docker.extension.screenshots=[{"alt":"SQL extension with container details expanded.", "url":"https://raw.githubusercontent.com/dzsquared/docker-sql-extension/main/images/screenshot2.png"}, {"alt":"SQL extension with two containers listed.", "url":"https://raw.githubusercontent.com/dzsquared/docker-sql-extension/main/images/screenshot1.png"}]
            com.docker.desktop.extension.icon=https://raw.githubusercontent.com/dzsquared/docker-sql-extension/main/Database.png
            com.docker.extension.detailed-description=With the SQL extension you can create a new SQL container quickly in Docker Desktop. Select the version of SQL Server you want to use, enter a container name, SQL port, and generate a password before clicking the plus button to create the container. Once a container is created, you can start, stop, and delete it using the buttons in the extension tab. Connect to the container directly in the extension with the embedded sqlcmd tool or by using your preferred SQL client. For convenience the connection string is displayed in the extension tab and a button for launching the SQL extension in VS Code is provided.
            com.docker.extension.publisher-url=https://github.com/dzsquared/docker-sql-extension
            com.docker.extension.additional-urls=[{"title":"Source code and notices","url":"https://github.com/dzsquared/docker-sql-extension/blob/main/README.md"},{"title":"License","url":"https://github.com/dzsquared/docker-sql-extension/blob/main/LICENSE"}]
            com.docker.extension.categories=database
            com.docker.extension.changelog=h3>0.3.0, ADS retirement</h3><ul><li>Adds VS Code launch button</li></ul><h3>0.2.0, Initial release</h3><ul><li>SQL container creation</li><li>Connection strings</li><li>Add and list databases</li><li>Embedded sqlcmd CLI</li></ul>

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.vTag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.vTag }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
